# Enhanced Camera Debug Makefile

AS = as
CC = clang
ASFLAGS = -arch arm64 -g -DDEBUG_BUILD
CFLAGS = -arch arm64 -O2 -Wall -g -fsanitize=address -fsanitize=undefined
OBJCFLAGS = -fobjc-arc -fmodules -mmacosx-version-min=11.0
LDFLAGS = -framework Cocoa -framework Metal -framework MetalKit -framework CoreGraphics -lpthread -fsanitize=address -fsanitize=undefined

# Directories
SRC_DIR = src
TEST_DIR = src/test
GRAPHICS_DIR = src/graphics
BUILD_DIR = build

# Source files
ASM_SOURCES = \
    $(GRAPHICS_DIR)/camera_controller_working.s \
    $(GRAPHICS_DIR)/camera_performance_profiler_stub.s \
    $(GRAPHICS_DIR)/memory_leak_detector_stub.s \
    $(GRAPHICS_DIR)/asm_debug_helpers_stub.s

C_SOURCES = \
    $(TEST_DIR)/camera_debug_test.c

OBJC_SOURCES = \
    src/main_camera_city_fixed.m

# Object files
ASM_OBJECTS = $(patsubst $(SRC_DIR)/%.s,$(BUILD_DIR)/%.o,$(ASM_SOURCES))
C_OBJECTS = $(patsubst $(SRC_DIR)/%.c,$(BUILD_DIR)/%.o,$(C_SOURCES))
OBJC_OBJECTS = $(patsubst $(SRC_DIR)/%.m,$(BUILD_DIR)/%.o,$(OBJC_SOURCES))

# Targets
DEBUG_TEST = $(BUILD_DIR)/camera_debug_test
CITY_DEMO = $(BUILD_DIR)/camera_city_demo
PERF_TEST = $(BUILD_DIR)/camera_perf_test

.PHONY: all clean test demo perf regression stress dirs

all: dirs $(DEBUG_TEST) $(CITY_DEMO)

dirs:
	@mkdir -p $(BUILD_DIR)/graphics
	@mkdir -p $(BUILD_DIR)/test

# Debug test executable
$(DEBUG_TEST): $(ASM_OBJECTS) $(BUILD_DIR)/test/camera_debug_test.o
	@echo "🔗 Linking debug test..."
	@$(CC) $(LDFLAGS) -o $@ $^
	@echo "✅ Debug test ready"

# City demo executable
$(CITY_DEMO): $(ASM_OBJECTS) $(BUILD_DIR)/main_camera_city_fixed.o
	@echo "🔗 Linking city demo..."
	@$(CC) $(LDFLAGS) -o $@ $^
	@echo "✅ City demo ready"

# Assembly rules
$(BUILD_DIR)/%.o: $(SRC_DIR)/%.s
	@echo "🔧 Assembling $<..."
	@mkdir -p $(dir $@)
	@$(AS) $(ASFLAGS) -o $@ $<

# C compilation
$(BUILD_DIR)/%.o: $(SRC_DIR)/%.c
	@echo "🔨 Compiling $<..."
	@mkdir -p $(dir $@)
	@$(CC) $(CFLAGS) -c -o $@ $<

# Objective-C compilation
$(BUILD_DIR)/%.o: $(SRC_DIR)/%.m
	@echo "🔨 Compiling $<..."
	@mkdir -p $(dir $@)
	@$(CC) $(OBJCFLAGS) $(CFLAGS) -c -o $@ $<

# Test targets
test: $(DEBUG_TEST)
	@echo "\n🧪 Running camera debug tests..."
	@./$(DEBUG_TEST)

test-verbose: $(DEBUG_TEST)
	@echo "\n🧪 Running verbose tests..."
	@./$(DEBUG_TEST) -v

stress: $(DEBUG_TEST)
	@echo "\n💪 Running stress test..."
	@./$(DEBUG_TEST) -s

demo: $(CITY_DEMO)
	@echo "\n🏙️ Running city demo..."
	@./$(CITY_DEMO)

# Performance profiling
perf: $(DEBUG_TEST)
	@echo "\n📊 Running performance profiling..."
	@xcrun xctrace record --template 'Time Profiler' --launch ./$(DEBUG_TEST) --output camera_profile.trace

# Memory leak detection
leaks: $(DEBUG_TEST)
	@echo "\n🔍 Checking for memory leaks..."
	@leaks --atExit -- ./$(DEBUG_TEST)

# Regression testing
regression: $(DEBUG_TEST)
	@echo "\n📈 Running regression tests..."
	@python3 $(GRAPHICS_DIR)/regression_test_system.py --executable $(DEBUG_TEST) --output-dir $(BUILD_DIR)/regression

# Coverage analysis
coverage: $(DEBUG_TEST)
	@echo "\n📊 Generating coverage report..."
	@python3 $(GRAPHICS_DIR)/coverage_visualizer.py --binary $(DEBUG_TEST) --output $(BUILD_DIR)/coverage.html

# Fuzzing
fuzz: $(DEBUG_TEST)
	@echo "\n🔀 Starting fuzzer..."
	@python3 $(GRAPHICS_DIR)/fuzzer.py $(DEBUG_TEST) --duration 300 --jobs 4

# Run all tests
test-all: test test-verbose stress leaks regression
	@echo "\n✅ All tests completed!"

# Debug with lldb
debug: $(DEBUG_TEST)
	@echo "\n🐛 Starting debugger..."
	@lldb -s $(GRAPHICS_DIR)/lldb_camera_commands.py $(DEBUG_TEST)

# Clean
clean:
	@echo "🧹 Cleaning..."
	@rm -rf $(BUILD_DIR)
	@rm -f *.trace
	@echo "✨ Clean complete!"

# Help
help:
	@echo "Camera Debug Makefile"
	@echo "===================="
	@echo "Targets:"
	@echo "  make         - Build all targets"
	@echo "  make test    - Run basic tests"
	@echo "  make stress  - Run stress tests"
	@echo "  make demo    - Run city demo"
	@echo "  make perf    - Profile performance"
	@echo "  make leaks   - Check memory leaks"
	@echo "  make fuzz    - Run fuzzer"
	@echo "  make debug   - Debug with lldb"
	@echo "  make clean   - Clean build files"