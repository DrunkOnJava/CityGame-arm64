# SimCity ARM64 - Advanced Performance Features Makefile
# Week 3, Day 12 - JIT Optimization, PGO, Cache Optimization, NUMA Placement
# Created by Agent 1: Core Module System

.PHONY: all clean test benchmark install

# Build configuration
CC = clang
AS = as
LD = ld
ARCH = arm64
TARGET = apple-darwin

# Optimization flags for Apple Silicon
CFLAGS = -arch $(ARCH) -target $(ARCH)-$(TARGET) -O3 -g
CFLAGS += -Wall -Wextra -Wpedantic -Werror
CFLAGS += -ffast-math -funroll-loops -fvectorize
CFLAGS += -mcpu=apple-m1 -mtune=apple-m1

# Apple Silicon specific optimizations
CFLAGS += -DAPPLE_SILICON=1 -DNEON_SIMD=1 -DLSE_ATOMICS=1
CFLAGS += -moutline-atomics -mno-outline-atomics

# ARM64 assembly flags
ASFLAGS = -arch $(ARCH) -target $(ARCH)-$(TARGET)
ASFLAGS += -g -W --fatal-warnings

# Linker flags
LDFLAGS = -arch $(ARCH) -target $(ARCH)-$(TARGET)
LDFLAGS += -framework Foundation -framework System
LDFLAGS += -lpthread -ldl

# Include paths
INCLUDES = -I. -I../include -I../../include

# Source files for advanced performance features
ADVANCED_PERF_SOURCES = \
	jit_optimization.s \
	profile_guided_optimization.s \
	cache_optimization.s \
	numa_optimization.s

# Header files
ADVANCED_PERF_HEADERS = \
	jit_optimization.h \
	module_security.h \
	module_versioning.h \
	module_interface.h

# Object files
ADVANCED_PERF_OBJECTS = $(ADVANCED_PERF_SOURCES:.s=.o)

# Test files
TEST_SOURCES = \
	test_jit_optimization.c \
	test_pgo_system.c \
	test_cache_optimization.c \
	test_numa_placement.c \
	test_integrated_performance.c

TEST_OBJECTS = $(TEST_SOURCES:.c=.o)
TEST_EXECUTABLES = $(TEST_SOURCES:.c=_test)

# Benchmark files
BENCHMARK_SOURCES = \
	benchmark_jit_compilation.c \
	benchmark_pgo_analysis.c \
	benchmark_cache_optimization.c \
	benchmark_numa_placement.c \
	benchmark_integrated_performance.c

BENCHMARK_OBJECTS = $(BENCHMARK_SOURCES:.c=.o)
BENCHMARK_EXECUTABLES = $(BENCHMARK_SOURCES:.c=_benchmark)

# Static library
LIBADVANCED_PERF = libadvanced_performance.a

# Main targets
all: $(LIBADVANCED_PERF) tests benchmarks

# Build static library
$(LIBADVANCED_PERF): $(ADVANCED_PERF_OBJECTS)
	@echo "Creating advanced performance library..."
	ar rcs $@ $^
	ranlib $@
	@echo "Advanced performance library created: $@"

# Assembly compilation rule
%.o: %.s
	@echo "Assembling $<..."
	$(AS) $(ASFLAGS) $(INCLUDES) -o $@ $<

# C compilation rule for tests
%.o: %.c
	@echo "Compiling $<..."
	$(CC) $(CFLAGS) $(INCLUDES) -c -o $@ $<

# Test targets
tests: $(TEST_EXECUTABLES)

%_test: test_%.o $(LIBADVANCED_PERF)
	@echo "Linking test $@..."
	$(CC) $(LDFLAGS) -o $@ $< -L. -ladvanced_performance
	@echo "Test executable created: $@"

# Benchmark targets
benchmarks: $(BENCHMARK_EXECUTABLES)

%_benchmark: benchmark_%.o $(LIBADVANCED_PERF)
	@echo "Linking benchmark $@..."
	$(CC) $(LDFLAGS) -o $@ $< -L. -ladvanced_performance
	@echo "Benchmark executable created: $@"

# Test execution targets
test-jit: test_jit_optimization_test
	@echo "Running JIT optimization tests..."
	./test_jit_optimization_test

test-pgo: test_pgo_system_test
	@echo "Running PGO system tests..."
	./test_pgo_system_test

test-cache: test_cache_optimization_test
	@echo "Running cache optimization tests..."
	./test_cache_optimization_test

test-numa: test_numa_placement_test
	@echo "Running NUMA placement tests..."
	./test_numa_placement_test

test-integrated: test_integrated_performance_test
	@echo "Running integrated performance tests..."
	./test_integrated_performance_test

test-all: tests
	@echo "Running all advanced performance tests..."
	@for test in $(TEST_EXECUTABLES); do \
		echo "Running $$test..."; \
		./$$test || exit 1; \
	done
	@echo "All tests passed!"

# Benchmark execution targets
benchmark-jit: benchmark_jit_compilation_benchmark
	@echo "Running JIT compilation benchmarks..."
	./benchmark_jit_compilation_benchmark

benchmark-pgo: benchmark_pgo_analysis_benchmark
	@echo "Running PGO analysis benchmarks..."
	./benchmark_pgo_analysis_benchmark

benchmark-cache: benchmark_cache_optimization_benchmark
	@echo "Running cache optimization benchmarks..."
	./benchmark_cache_optimization_benchmark

benchmark-numa: benchmark_numa_placement_benchmark
	@echo "Running NUMA placement benchmarks..."
	./benchmark_numa_placement_benchmark

benchmark-integrated: benchmark_integrated_performance_benchmark
	@echo "Running integrated performance benchmarks..."
	./benchmark_integrated_performance_benchmark

benchmark-all: benchmarks
	@echo "Running all advanced performance benchmarks..."
	@for benchmark in $(BENCHMARK_EXECUTABLES); do \
		echo "Running $$benchmark..."; \
		./$$benchmark; \
	done
	@echo "All benchmarks completed!"

# Performance validation
validate-performance: test-all benchmark-all
	@echo "Validating performance targets..."
	@echo "Target: JIT compilation < 1ms"
	@echo "Target: Profile analysis < 5ms" 
	@echo "Target: Cache optimization < 100μs"
	@echo "Target: NUMA placement < 50μs"
	@echo "Target: Module load time < 2ms"
	./benchmark_integrated_performance_benchmark --validate

# Static analysis
static-analysis:
	@echo "Running static analysis on advanced performance features..."
	@if command -v scan-build >/dev/null 2>&1; then \
		scan-build $(CC) $(CFLAGS) $(INCLUDES) -c $(TEST_SOURCES); \
	else \
		echo "scan-build not available, skipping static analysis"; \
	fi

# Memory analysis
memory-analysis: tests
	@echo "Running memory analysis..."
	@if command -v leaks >/dev/null 2>&1; then \
		for test in $(TEST_EXECUTABLES); do \
			echo "Memory analysis for $$test..."; \
			leaks --atExit -- ./$$test; \
		done; \
	else \
		echo "leaks tool not available, skipping memory analysis"; \
	fi

# Performance profiling
profile: benchmarks
	@echo "Running performance profiling..."
	@if command -v instruments >/dev/null 2>&1; then \
		instruments -t "Time Profiler" -D profile_results ./benchmark_integrated_performance_benchmark; \
		echo "Profile results saved to profile_results.trace"; \
	else \
		echo "Instruments not available, skipping profiling"; \
	fi

# Code coverage
coverage: tests
	@echo "Generating code coverage report..."
	@if command -v gcov >/dev/null 2>&1; then \
		$(CC) $(CFLAGS) --coverage $(INCLUDES) -o coverage_test $(TEST_SOURCES) $(ADVANCED_PERF_SOURCES); \
		./coverage_test; \
		gcov $(ADVANCED_PERF_SOURCES); \
		echo "Coverage report generated"; \
	else \
		echo "gcov not available, skipping coverage analysis"; \
	fi

# Documentation generation
docs:
	@echo "Generating documentation for advanced performance features..."
	@if command -v doxygen >/dev/null 2>&1; then \
		doxygen Doxyfile.advanced_performance; \
	else \
		echo "doxygen not available, generating simple documentation"; \
		mkdir -p docs; \
		echo "# Advanced Performance Features Documentation" > docs/README.md; \
		echo "" >> docs/README.md; \
		echo "## JIT Optimization System" >> docs/README.md; \
		grep -E "^/\*|^ \*" jit_optimization.h | head -20 >> docs/README.md; \
		echo "" >> docs/README.md; \
		echo "## Profile-Guided Optimization" >> docs/README.md; \
		grep -E "^/\*|^ \*" profile_guided_optimization.s | head -20 >> docs/README.md; \
		echo "Documentation generated in docs/"; \
	fi

# Installation
install: $(LIBADVANCED_PERF)
	@echo "Installing advanced performance features..."
	mkdir -p ../lib
	cp $(LIBADVANCED_PERF) ../lib/
	mkdir -p ../include/hmr
	cp $(ADVANCED_PERF_HEADERS) ../include/hmr/
	@echo "Advanced performance features installed"

# Cleaning
clean:
	@echo "Cleaning advanced performance features..."
	rm -f $(ADVANCED_PERF_OBJECTS)
	rm -f $(TEST_OBJECTS) $(TEST_EXECUTABLES)
	rm -f $(BENCHMARK_OBJECTS) $(BENCHMARK_EXECUTABLES)
	rm -f $(LIBADVANCED_PERF)
	rm -f *.gcda *.gcno *.gcov
	rm -rf profile_results.trace*
	rm -rf docs
	@echo "Clean completed"

# Debug build
debug: CFLAGS += -DDEBUG=1 -O0 -fsanitize=address
debug: ASFLAGS += -DDEBUG=1
debug: LDFLAGS += -fsanitize=address
debug: all

# Release build  
release: CFLAGS += -DNDEBUG=1 -O3 -flto
release: ASFLAGS += -DNDEBUG=1
release: LDFLAGS += -flto
release: all

# Performance optimized build
performance: CFLAGS += -DPERFORMANCE=1 -O3 -march=native -flto -fno-stack-protector
performance: ASFLAGS += -DPERFORMANCE=1
performance: LDFLAGS += -flto
performance: all

# Integration with main build system
integration-test: all
	@echo "Running integration tests with main HMR system..."
	$(MAKE) -C .. test-hmr-advanced-performance

# Help target
help:
	@echo "SimCity ARM64 Advanced Performance Features Build System"
	@echo ""
	@echo "Targets:"
	@echo "  all                    - Build all components"
	@echo "  tests                  - Build all tests"
	@echo "  benchmarks             - Build all benchmarks"
	@echo "  test-all               - Run all tests"
	@echo "  benchmark-all          - Run all benchmarks"
	@echo "  validate-performance   - Validate performance targets"
	@echo "  static-analysis        - Run static code analysis"
	@echo "  memory-analysis        - Run memory leak analysis"
	@echo "  profile                - Run performance profiling"
	@echo "  coverage               - Generate code coverage report"
	@echo "  docs                   - Generate documentation"
	@echo "  install                - Install library and headers"
	@echo "  clean                  - Clean build artifacts"
	@echo ""
	@echo "Build variants:"
	@echo "  debug                  - Debug build with sanitizers"
	@echo "  release                - Optimized release build"
	@echo "  performance            - Maximum performance build"
	@echo ""
	@echo "Individual tests:"
	@echo "  test-jit               - JIT optimization tests"
	@echo "  test-pgo               - PGO system tests"
	@echo "  test-cache             - Cache optimization tests"
	@echo "  test-numa              - NUMA placement tests"
	@echo "  test-integrated        - Integrated performance tests"

# Default target
.DEFAULT_GOAL := all

# Dependencies
jit_optimization.o: jit_optimization.s jit_optimization.h
profile_guided_optimization.o: profile_guided_optimization.s jit_optimization.h
cache_optimization.o: cache_optimization.s jit_optimization.h
numa_optimization.o: numa_optimization.s jit_optimization.h

# Performance targets for validation
.PHONY: check-performance-targets
check-performance-targets:
	@echo "Performance Targets for Day 12:"
	@echo "- JIT compilation hints: < 1ms"
	@echo "- Profile analysis: < 5ms"
	@echo "- Cache optimization: < 100μs"
	@echo "- NUMA placement: < 50μs"
	@echo "- Module load time improvement: < 2ms (from 2.8ms)"
	@echo "- Memory overhead reduction: < 200KB per module"
	@echo "- Concurrent modules: 750+ simultaneous"