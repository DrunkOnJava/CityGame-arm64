# SimCity ARM64 - HMR Unified Integration Makefile
# Agent 0: HMR Orchestrator - Week 2, Day 6
#
# Comprehensive build system for unified HMR system testing

# Compiler and flags
CC = clang
CFLAGS = -Wall -Wextra -O2 -g -std=c11
CFLAGS += -I../../include/interfaces
CFLAGS += -I.
CFLAGS += -DHMR_UNIFIED_BUILD=1

# ARM64 specific flags
CFLAGS += -march=armv8-a+simd
CFLAGS += -mtune=apple-a14

# Linker flags
LDFLAGS = -lpthread -lm -framework Foundation -framework Metal -framework MetalKit

# Directories
BUILD_DIR = build_unified
OBJ_DIR = $(BUILD_DIR)/obj
BIN_DIR = $(BUILD_DIR)/bin
TEST_DIR = $(BUILD_DIR)/tests
REPORTS_DIR = reports

# Source files for each agent
ORCHESTRATOR_SRCS = orchestrator.c
MODULE_SRCS = module_loader.s module_memory.s
RUNTIME_SRCS = runtime_integration.c
DEBUG_SRCS = dev_server.c metrics.c visual_feedback.c
ASSET_SRCS = asset_watcher.m shader_manager.m texture_manager.c texture_validator.c

# Unified source files
UNIFIED_SRCS = hmr_unified_integration_test.c

# Object files
ORCHESTRATOR_OBJS = $(ORCHESTRATOR_SRCS:%.c=$(OBJ_DIR)/%.o)
MODULE_OBJS = $(MODULE_SRCS:%.s=$(OBJ_DIR)/%.o)
RUNTIME_OBJS = $(RUNTIME_SRCS:%.c=$(OBJ_DIR)/%.o)
DEBUG_OBJS = $(DEBUG_SRCS:%.c=$(OBJ_DIR)/%.o)
ASSET_OBJS = $(ASSET_SRCS:%.c=$(OBJ_DIR)/%.o) $(ASSET_SRCS:%.m=$(OBJ_DIR)/%.o)
UNIFIED_OBJS = $(UNIFIED_SRCS:%.c=$(OBJ_DIR)/%.o)

# All object files
ALL_OBJS = $(ORCHESTRATOR_OBJS) $(MODULE_OBJS) $(RUNTIME_OBJS) $(DEBUG_OBJS) $(ASSET_OBJS) $(UNIFIED_OBJS)

# Target executables
INTEGRATION_TEST = $(BIN_DIR)/hmr_integration_test
API_TEST = $(BIN_DIR)/api_compatibility_test
PERFORMANCE_TEST = $(BIN_DIR)/performance_test

# Default target
.PHONY: all
all: directories $(INTEGRATION_TEST) $(API_TEST)

# Create directories
.PHONY: directories
directories:
	@mkdir -p $(BUILD_DIR) $(OBJ_DIR) $(BIN_DIR) $(TEST_DIR) $(REPORTS_DIR)

# Compilation rules
$(OBJ_DIR)/%.o: %.c
	@echo "Compiling C: $<"
	@$(CC) $(CFLAGS) -c $< -o $@

$(OBJ_DIR)/%.o: %.m
	@echo "Compiling Objective-C: $<"
	@$(CC) $(CFLAGS) -c $< -o $@

$(OBJ_DIR)/%.o: %.s
	@echo "Assembling: $<"
	@$(CC) $(CFLAGS) -c $< -o $@

# Integration test executable
$(INTEGRATION_TEST): $(UNIFIED_OBJS) mocks/agent_mocks.c
	@echo "Linking integration test..."
	@$(CC) $(CFLAGS) $(UNIFIED_OBJS) mocks/agent_mocks.c -o $@ $(LDFLAGS)

# API compatibility test
$(API_TEST): $(OBJ_DIR)/api_test.o
	@echo "Linking API test..."
	@$(CC) $(CFLAGS) $< -o $@ $(LDFLAGS)

$(OBJ_DIR)/api_test.o: $(TEST_DIR)/api_test.c
	@echo "Compiling API test..."
	@$(CC) $(CFLAGS) -c $< -o $@

# Generate API test source  
$(TEST_DIR)/api_test.c: ../../include/interfaces/hmr_unified.h directories
	@echo "Generating API compatibility test..."
	@echo '#include "hmr_unified.h"' > $@
	@echo '#include <stdio.h>' >> $@
	@echo '#include <assert.h>' >> $@
	@echo '' >> $@
	@echo 'int main() {' >> $@
	@echo '    printf("=== HMR Unified API Compatibility Test ===\\n");' >> $@
	@echo '    ' >> $@
	@echo '    // Test type definitions' >> $@
	@echo '    hmr_module_state_t state = HMR_MODULE_STATE_ACTIVE;' >> $@
	@echo '    hmr_capability_flags_t caps = HMR_CAP_HOT_SWAPPABLE | HMR_CAP_ARM64_ONLY;' >> $@
	@echo '    hmr_asset_type_t asset = HMR_ASSET_METAL_SHADER;' >> $@
	@echo '    hmr_shader_type_t shader = HMR_SHADER_VERTEX;' >> $@
	@echo '    ' >> $@
	@echo '    printf("✓ Type definitions compiled successfully\\n");' >> $@
	@echo '    printf("  Module state: %d\\n", state);' >> $@
	@echo '    printf("  Capabilities: 0x%x\\n", caps);' >> $@
	@echo '    printf("  Asset type: %d\\n", asset);' >> $@
	@echo '    printf("  Shader type: %d\\n", shader);' >> $@
	@echo '    ' >> $@
	@echo '    // Test constants' >> $@
	@echo '    assert(HMR_SUCCESS == 0);' >> $@
	@echo '    assert(HMR_MAGIC_NUMBER == 0x484D522D41524D36ULL);' >> $@
	@echo '    assert(HMR_VERSION == 2);' >> $@
	@echo '    printf("✓ Constants validated\\n");' >> $@
	@echo '    ' >> $@
	@echo '    // Test structure sizes (basic validation)' >> $@
	@echo '    printf("Structure sizes:\\n");' >> $@
	@echo '    printf("  hmr_module_info_t: %zu bytes\\n", sizeof(hmr_module_info_t));' >> $@
	@echo '    printf("  hmr_unified_metrics_t: %zu bytes\\n", sizeof(hmr_unified_metrics_t));' >> $@
	@echo '    printf("  hmr_shared_control_t: %zu bytes\\n", sizeof(hmr_shared_control_t));' >> $@
	@echo '    ' >> $@
	@echo '    // Verify cache alignment' >> $@
	@echo '    assert(sizeof(hmr_module_info_t) % 64 == 0);' >> $@
	@echo '    assert(sizeof(hmr_shared_control_t) % 4096 == 0);' >> $@
	@echo '    printf("✓ Structure alignment validated\\n");' >> $@
	@echo '    ' >> $@
	@echo '    printf("\\n=== API Compatibility Test PASSED ===\\n");' >> $@
	@echo '    return 0;' >> $@
	@echo '}' >> $@

# Test targets
.PHONY: test
test: all run-api-test run-integration-test

.PHONY: run-api-test
run-api-test: $(API_TEST)
	@echo "Running API compatibility test..."
	@$(API_TEST)

.PHONY: run-integration-test
run-integration-test: $(INTEGRATION_TEST)
	@echo "Running integration test suite..."
	@$(INTEGRATION_TEST) | tee $(REPORTS_DIR)/integration_results.txt

.PHONY: run-performance-test
run-performance-test: performance-benchmark

.PHONY: performance-benchmark
performance-benchmark: all
	@echo "Running performance benchmarks..."
	@mkdir -p $(REPORTS_DIR)
	@echo "=== HMR Performance Benchmark ===" > $(REPORTS_DIR)/performance.txt
	@echo "Timestamp: $$(date)" >> $(REPORTS_DIR)/performance.txt
	@echo "" >> $(REPORTS_DIR)/performance.txt
	
	@echo "1. API Compilation Speed:" >> $(REPORTS_DIR)/performance.txt
	@time -p $(CC) $(CFLAGS) -c $(TEST_DIR)/api_test.c -o /tmp/api_test.o 2>&1 | \
	 tail -3 >> $(REPORTS_DIR)/performance.txt
	
	@echo "" >> $(REPORTS_DIR)/performance.txt
	@echo "2. Integration Test Startup:" >> $(REPORTS_DIR)/performance.txt
	@time -p $(INTEGRATION_TEST) >/dev/null 2>&1 | tail -3 >> $(REPORTS_DIR)/performance.txt
	
	@echo "Performance benchmark completed. Results in $(REPORTS_DIR)/performance.txt"

# Static analysis
.PHONY: static-analysis
static-analysis:
	@echo "Running static analysis..."
	@mkdir -p $(REPORTS_DIR)
	
	@echo "=== Static Analysis Report ===" > $(REPORTS_DIR)/static_analysis.txt
	@echo "Timestamp: $$(date)" >> $(REPORTS_DIR)/static_analysis.txt
	@echo "" >> $(REPORTS_DIR)/static_analysis.txt
	
	@echo "1. Header include guards:" >> $(REPORTS_DIR)/static_analysis.txt
	@for header in *.h; do \
		if [ -f "$$header" ]; then \
			if grep -q "#ifndef.*_H" "$$header"; then \
				echo "  ✓ $$header" >> $(REPORTS_DIR)/static_analysis.txt; \
			else \
				echo "  ✗ $$header (missing include guard)" >> $(REPORTS_DIR)/static_analysis.txt; \
			fi; \
		fi; \
	done
	
	@echo "" >> $(REPORTS_DIR)/static_analysis.txt
	@echo "2. Code quality checks:" >> $(REPORTS_DIR)/static_analysis.txt
	@echo "  TODO/FIXME comments: $$(find . -name "*.c" -o -name "*.h" | xargs grep -c "TODO\|FIXME" 2>/dev/null | wc -l)" >> $(REPORTS_DIR)/static_analysis.txt
	@echo "  Files with trailing whitespace: $$(find . -name "*.c" -o -name "*.h" | xargs grep -l '[[:space:]]$$' 2>/dev/null | wc -l)" >> $(REPORTS_DIR)/static_analysis.txt
	
	@echo "Static analysis completed. Results in $(REPORTS_DIR)/static_analysis.txt"

# Continuous Integration target
.PHONY: ci
ci: clean directories test performance-benchmark static-analysis ci-report

.PHONY: ci-report
ci-report:
	@echo "Generating CI report..."
	@mkdir -p $(REPORTS_DIR)
	@echo "# HMR Unified Integration CI Report" > $(REPORTS_DIR)/ci_summary.md
	@echo "" >> $(REPORTS_DIR)/ci_summary.md
	@echo "**Generated:** $$(date)" >> $(REPORTS_DIR)/ci_summary.md
	@echo "**Agent:** 0 (HMR Orchestrator)" >> $(REPORTS_DIR)/ci_summary.md
	@echo "**Phase:** Week 2, Day 6" >> $(REPORTS_DIR)/ci_summary.md
	@echo "" >> $(REPORTS_DIR)/ci_summary.md
	@echo "## Build Status" >> $(REPORTS_DIR)/ci_summary.md
	@echo "- [x] API Compatibility Test" >> $(REPORTS_DIR)/ci_summary.md
	@echo "- [x] Integration Test Suite" >> $(REPORTS_DIR)/ci_summary.md
	@echo "- [x] Performance Benchmarks" >> $(REPORTS_DIR)/ci_summary.md
	@echo "- [x] Static Analysis" >> $(REPORTS_DIR)/ci_summary.md
	@echo "" >> $(REPORTS_DIR)/ci_summary.md
	@echo "## Test Results" >> $(REPORTS_DIR)/ci_summary.md
	@if [ -f $(REPORTS_DIR)/integration_results.txt ]; then \
		echo "\n### Integration Tests" >> $(REPORTS_DIR)/ci_summary.md; \
		tail -5 $(REPORTS_DIR)/integration_results.txt >> $(REPORTS_DIR)/ci_summary.md; \
	fi
	@if [ -f $(REPORTS_DIR)/performance.txt ]; then \
		echo "\n### Performance Results" >> $(REPORTS_DIR)/ci_summary.md; \
		echo "\`\`\`" >> $(REPORTS_DIR)/ci_summary.md; \
		cat $(REPORTS_DIR)/performance.txt >> $(REPORTS_DIR)/ci_summary.md; \
		echo "\`\`\`" >> $(REPORTS_DIR)/ci_summary.md; \
	fi
	@echo "\nCI report generated: $(REPORTS_DIR)/ci_summary.md"

# Documentation
.PHONY: docs
docs:
	@echo "Generating documentation..."
	@mkdir -p $(REPORTS_DIR)
	@echo "# HMR Unified API Reference" > $(REPORTS_DIR)/api_reference.md
	@echo "" >> $(REPORTS_DIR)/api_reference.md
	@echo "This document provides a comprehensive reference for the unified HMR API." >> $(REPORTS_DIR)/api_reference.md
	@echo "" >> $(REPORTS_DIR)/api_reference.md
	@echo "## Main Header" >> $(REPORTS_DIR)/api_reference.md
	@echo "- hmr_unified.h - Main unified header including all agent APIs" >> $(REPORTS_DIR)/api_reference.md
	@echo "" >> $(REPORTS_DIR)/api_reference.md
	@echo "## Agent Functions" >> $(REPORTS_DIR)/api_reference.md
	@echo "- Agent 0: hmr_orchestrator_init(), hmr_orchestrator_shutdown()" >> $(REPORTS_DIR)/api_reference.md
	@echo "- Agent 1: hmr_module_system_init(), hmr_module_load()" >> $(REPORTS_DIR)/api_reference.md
	@echo "- Agent 3: hmr_runtime_init(), hmr_runtime_frame_start()" >> $(REPORTS_DIR)/api_reference.md
	@echo "- Agent 4: hmr_debug_init(), hmr_debug_dev_server_init()" >> $(REPORTS_DIR)/api_reference.md
	@echo "- Agent 5: hmr_asset_pipeline_init(), hmr_shader_manager_init()" >> $(REPORTS_DIR)/api_reference.md
	@echo "Documentation generated: $(REPORTS_DIR)/api_reference.md"

# Clean targets
.PHONY: clean
clean:
	@echo "Cleaning build artifacts..."
	@rm -rf $(BUILD_DIR)
	@rm -rf $(REPORTS_DIR)

.PHONY: clean-all
clean-all: clean
	@echo "Cleaning all generated files..."
	@find . -name "*.o" -delete
	@find . -name "*.dylib" -delete
	@find . -name "*.dSYM" -type d -exec rm -rf {} + 2>/dev/null || true

# Help target
.PHONY: help
help:
	@echo "HMR Unified Integration Makefile"
	@echo "================================"
	@echo ""
	@echo "Targets:"
	@echo "  all              - Build all targets"
	@echo "  test             - Run all tests"
	@echo "  ci               - Run full CI pipeline"
	@echo "  performance      - Run performance benchmarks"
	@echo "  static-analysis  - Run static code analysis"
	@echo "  docs             - Generate documentation"
	@echo "  clean            - Clean build artifacts"
	@echo "  clean-all        - Clean all generated files"
	@echo "  help             - Show this help"
	@echo ""
	@echo "Individual tests:"
	@echo "  run-api-test     - API compatibility test"
	@echo "  run-integration-test - Integration test suite"
	@echo "  run-performance-test - Performance benchmarks"

# Prevent make from deleting intermediate files
.PRECIOUS: $(OBJ_DIR)/%.o $(TEST_DIR)/%.c